name: Caching node 

on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # step 1
  setup:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: for repo setup
        run: echo "pwd && ls"
# step 2
  node-cache:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
      - run: ls && npm install
      - run: echo "next step is npm cache"
      - name: get npm cache dir
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - uses: actions/cache@v4
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
        
# step 3
  python-cache:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12.3'
          cache: 'pip'
      - name: create virtual
        run: |
          python3 -m venv venv
          source ./venv/bin/active
      - name: install and cache
        run: pip install -r requirements.txt
      - name: check if cache is thier or not
        run: echo "next step is catche"
      - name: get pip cache dir
        id: pip-cache
        shell: bash
        run: |
          echo "echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT"
      - uses: actions/cache@v4
        with:
          path: ~/.cache.pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
